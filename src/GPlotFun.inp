include common.inp --force

function void GPlotFun (bundle *self)
    /* Main function. */

    self = self + default_opts()

    # TODO: outsource
    # Color check for point and lines
    if inbundle(self, "colors")
        if typestr(typeof(self.colors))=="null"	# user selects a palette via string --> BUG: "string" doesn't work
            tmp = get_color_pallet(self.colors)     		# just a trick
            self.colors = tmp					# update
        endif
    else
        self.colors = self.color			# use default palette
    endif

    # TODO: outsource
    # Color check for vertical lines
    if inbundle(self, "colors")
        if typestr(typeof(self.colors))=="null"	# user selects a palette via string --> FIXME: "string" doesn't work
            tmp = get_color_pallet(self.colors)  		 # just a trick
            self.colors = tmp					         # update
        endif
    else
        self.colors = self.color			# use default palette
    endif

    # TODO: outsource
    # FIXME: maybe legend_str is not needed being specified
    if !inbundle(self, "legend_str") && self.which != "heatmap"	#TODO: rename to Legend
        funcerr "Provide an array of legend names"
    endif

    # TODO: add checks:
    # - if pt is a scalar, fill up a vector
    # - if ps is a scalar, fill up a vector
    # - if only a single color entry is passed, fill aup an array
    # - check no. of all columns passed with length of legend_str
    # - alpha is bounded between [0,1]

    # Call plot function
    if self.which == "standard"
        do_standard_plot(&self)
    elif self.which == "scatter"
        do_scatter_plot(&self)
    elif self.which == "stackedbar"
        do_stacked_bar(&self)
        #elif which == "standard"
        #    do_standard_plot(&b)
    elif self.which == "heatmap"
        do_heatmap(&self)
    elif self.which == "frequency"
        do_frequency_plot(&self)
    else
        errorif(TRUE, "Unknown plotting type.")
    endif
end function


function void write_scatterplot_cmd (bundle *b)
    /* Write the "plot using" command for scatterplots */

    scalar addcol = 0

    printf "plot \\\n"

    if inbundle(b,"LMAT")
        scalar clhs = (inbundle(b, "lines")) ? (cols(b.lines)-1) : 0
        #scalar clhs = cols(b.lines)-1		# '-1' as first col. of b.lines refers to x-axis values

        loop j=1..cols(b.LMAT) -q		# Lines
            if j<=clhs					# LHS values
                printf "'-'using 1:2 t '%s' w lines linetype $j dt %d lc \
                  rgb '%s' pt %d ps %.2f lw %.2f pointinterval %.2f", \
                  b.legend_str[j+addcol], b.lines_dt[j], b.colors[j+addcol], \
                  b.pt[j], b.ps[j], b.lines_lw[j], b.lines_pi

            else
                printf "'-'using 1:2 axes x1y2 t '%s' w lines linetype $j dt %d lc \
                  rgb '%s' pt %d ps %.2f lw %.2f pointinterval %.2f", \
                  b.legend_str[j+addcol], b.lines_dt[j], b.colors[j+addcol], \
                  b.pt[j], b.ps[j], b.lines_lw[j], b.lines_pi

            endif

            if !inbundle(b,"PMAT")
                printf(j == cols(b.LMAT) ? "\n" : ", \\\n")
            else
                printf ", \\\n"
            endif

        endloop
        scalar addcol = cols(b.LMAT)		# FIXME: -1??
    endif

    if inbundle(b,"PMAT")			# Points
        scalar clhs = (inbundle(b, "points")) ? (cols(b.points)-1) : 0

        loop j=1..cols(b.PMAT) -q
            if j<=clhs					# RHS values
                printf "'-'using 1:2 t '%s' w points lc rgb '%s' pt %d ps %.2f", \
                  b.legend_str[j+addcol], b.colors[j+addcol], b.pt[j], b.ps[j]
            else
                printf "'-'using 1:2 axes x1y2 t '%s' w points lc \
                  rgb '%s' pt %d ps %.2f", \
                  b.legend_str[j+addcol], b.lines_dt[j], b.colors[j+addcol], b.pt[j], b.ps[j]
            endif
            printf(j == cols(b.PMAT) ? "\n" : ", \\\n")
        endloop
    endif
end function


# help function
function void write_standardplot_cmd (bundle *b)
/* Write the "plot using" command for standardplots:
   1) check and write cmd for impulses
   2) check and write cmd for lines
    3) check and write cmd for point */

    scalar addcol = 0			# counter
    scalar k = 2				# date strings are in the 2nd col.
    printf "plot \\\n"

    # horizontally filled lines
    if inbundle(b, "hfilled")	# Plot CI
        printf "'-' using 1:2:3 t '' lc rgb '#dddddd' w filledcurve"

        if any_key_in_bundle(b, defarray("IMAT", "PMAT", "LMAT"))
            printf ", \\\n"
            #printf(j == cols(b.LMAT) ? "\n" : ", \\\n")
        else
            printf "\n"
        endif
    endif

    # impulses
    if inbundle(b,"IMAT")
        scalar clhs = (inbundle(b, "impulses")) ? cols(b.impulses) : 0
        loop j=1..cols(b.IMAT) -q
            if j==1 && inbundle(b, "Date")

                if j<=clhs					# LHS values
                    printf " '-'using 1:xtic($%d < 0. ? \"\" : stringcolumn(%d)) \
                      axes x1y1 t '%s' w impulses lc rgb '%s' lw %.2f ", k, k, b.legend_str[j], \
                      b.colors[j], b.impulses_lw[j]
                else
                    printf " '-'using 1:xtic($%d < 0. ? \"\" : stringcolumn(%d)) \
                      axes x1y2 t '%s' w impulses rgb '%s' lw %.2f", k, k, \
                      b.legend_str[j+addcol], b.colors[j+addcol], b.lines_lw[j]
                endif

            else
                if j<=clhs
                    printf "'-'using 1 axes x1y1 t '%s' w impulses lc rgb '%s' lw %.2f", \
                      b.legend_str[j], b.colors[j], b.impulses_lw[j]
                else
                    printf "'-'using 1 axes x1y2 t '%s' w impulses lc rgb '%s' lw %.2f", \
                      b.legend_str[j], b.colors[j], b.impulses_rhs_lw[j]
                endif
            endif


            if any_key_in_bundle(b, defarray("PMAT", "LMAT"))
                printf ", \\\n"
            else
                printf(j == cols(b.LMAT) ? "\n" : ", \\\n")
            endif

        endloop
        addcol += cols(b.IMAT)
    endif


    # Lines
    if inbundle(b,"LMAT")

        scalar clhs = (inbundle(b, "lines")) ? cols(b.lines) : 0

        loop j=1..cols(b.LMAT) -q

            if j==1 && inbundle(b, "Date")

                if j<=clhs					# LHS values

                    printf " '-'using 1:xtic($%d < 0. ? \"\" : stringcolumn(%d)) \
                      axes x1y1 t '%s' w lines linetype $j dt %d lc rgb '%s' pt %d ps %.2f \
                      lw %.2f pointinterval %.2f", k, k, b.legend_str[j+addcol], \
                      b.lines_dt[j], b.colors[j+addcol], b.pt[j], b.ps[j], \
                      b.lines_lw[j], b.lines_pi

                else
                    printf " '-'using 1:xtic($%d < 0. ? \"\" : stringcolumn(%d)) \
                      axes x1y2 t '%s' w lines linetype $j dt %d lc rgb '%s' pt %d \
                      ps %.2f lw %.2f pointinterval %.2f", k, k, b.legend_str[j+addcol], \
                      b.lines_dt[j], b.colors[j+addcol], b.pt[j], b.ps[j], \
                      b.lines_lw[j], b.lines_pi
                endif

            else
                if j<=clhs					# LHS values
                    printf "'-'using 1 axes x1y1 t '%s' w lines linetype $j dt %d lc \
                      rgb '%s' pt %d ps %.2f lw %.2f pointinterval %.2f", \
                      b.legend_str[j+addcol], b.lines_dt[j], b.colors[j+addcol], \
                      b.pt[j], b.ps[j], b.lines_lw[j], b.lines_pi
                else
                    printf "'-'using 1 axes x1y2 t '%s' w lines linetype $j dt %d lc \
                      rgb '%s' pt %d ps %.2f lw %.2f pointinterval %.2f", \
                      b.legend_str[j+addcol], b.lines_dt[j], b.colors[j+addcol], b.pt[j], \
                      b.ps[j], b.lines_lw[j], b.lines_pi
                endif
            endif

            if !inbundle(b,"PMAT")
                printf(j == cols(b.LMAT) ? "\n" : ", \\\n")
            else
                printf ", \\\n"
            endif


        endloop
        addcol += cols(b.LMAT)
    endif

    # Points
    if inbundle(b,"PMAT")

        scalar clhs = (inbundle(b, "points")) ? cols(b.points) : 0

        # check point size for points -- should be >0
        loop j=1..cols(b.PMAT) -q
            b.ps[j+addcol] = (b.ps[j+addcol]==0) ? 0.5 : b.ps[j+addcol]
        endloop

        loop j=1..cols(b.PMAT) -q

            if j==1 && inbundle(b, "Date")
                if j<=clhs					# RHS values
                    printf " '-'using 1:xtic($%d < 0. ? \"\" : stringcolumn(%d)) axes x1y1 \
                      t '%s' w points lc rgb '%s' pt %d ps %.2f", \
                      k, k, b.legend_str[j+addcol], b.colors[j+addcol], b.pt[j+addcol], b.ps[j+addcol]
                else
                    printf " '-'using 1:xtic($%d < 0. ? \"\" : stringcolumn(%d)) axes x1y2 \
                      t '%s' w points lc rgb '%s' pt %d ps %.2f", \
                      k, k, b.legend_str[j+addcol], b.colors[j+addcol], b.pt[j+addcol], b.ps[j+addcol]
                endif

            else

                if j<=clhs					# RHS values
                    printf "'-'using 1:2 axes x1y1 t '%s' w points lc rgb '%s' pt %d ps %.2f", \
                      b.legend_str[j+addcol], b.colors[j+addcol], b.pt[j+addcol], b.ps[j+addcol]
                else
                    printf "'-'using 1:2 axes x1y2 t '%s' w points lc \
                      rgb '%s' pt %d ps %.2f", \
                      b.legend_str[j+addcol], b.colors[j+addcol], b.pt[j+addcol], b.ps[j+addcol]
                endif
            endif

            printf(j == cols(b.PMAT) ? "\n" : ", \\\n")
        endloop

    endif

end function


function void do_heatmap (bundle *b)
    /* heat = k by T matrix, k=cross-sectional dim., T=time dim.
        lines = draw horizonal lines */

    if b.which=="heatmap"
        matrix mat = b.heat
    else
        funcerr "Warning: doHeatmap() requires at least matrix 'heat'!"
    endif

    # Run basic settings
    write_gp_settings(&b)

    set warnings off  # omit warning for NAs
    tmpfile = b.tmpfile
    outfile @tmpfile --append

        # Put the border more to the background by applying it
        # only on the left and bottom part and put it and the tics in gray
        #printf "set style line 11 lc rgb \"#808080\" lt 1 \n"
        #printf "set border 3 back ls 11\n"			# get rid of upper + left border
        #        printf "set tics nomirror \n"
        #        printf "set datafile missing \"NA\" \n"
        if inbundle(b, ymin) && inbundle(b, y_max)
            printf "set cbrange[%.5f:%.5f] \n", b.ymin, b.y_max # set the value-range for legend
        endif

        # SET palette color
        # Defining a palette with discrete colors
        #printf "set palette defined ( 0 '#000fff', 1 '#90ff70', 2 '#ee0000') \n"
        # MATLAB COLORS:
        if b.mono==0
            printf "set palette defined (0 0 0 0.5, 1 0 0 1, 2 0 0.5 1, 3 0 1 1, \
              4 0.5 1 0.5, 5 1 1 0, 6 1 0.5 0, 7 1 0 0, 8 0.5 0 0)\n"
            #printf "set palette maxcolors 10 \n"
        else
            #printf "set palette gray negative\n" #gray positive
            printf "set palette gray negative gamma 1.5\n"
        endif
        # REMOVE COLORBOX
        if b.nocolorbox==1
            printf "unset colorbox\n"
        endif

        # Write xtics (date strings)
        if inbundle(b, "Date")
            scalar count = 1
            printf "set xtics ("
            loop i=1..cols(mat) -q
                if count==b.skipx || i==1
                    printf "\"%s\" %d, ", b.Date[i], $i
                    count=1
                endif
                count++
            endloop
            printf " ) out \n"
        endif

        # write plot specification
        printf "plot '-' using 1:2:3 matrix with image t ''\n"
        # HEATMAP data block
        loop i=1..rows(mat) -q
            loop j=1..cols(mat) -q
                if ok(mat[i,j])
                    printf "%g", mat[i,j]
                else
                    printf "NaN "
                endif
                if j<cols(mat)
                    printf ", "
                endif
            endloop
            printf "\n"
        endloop
        printf "e \n"

    end outfile

    string fname = b.fname
    gnuplot --input="@tmpfile" --output="@fname"
end function


function void do_stacked_bar (bundle *b)
/* barstacked = T by k matrix, k=separate bar plot (x1,...,xk), T=time dim.
    lines = draw horizonal lines -- only LHS at the moment */

    if inbundle(b, "barstacked")
        matrix mat = b.barstacked
    else
        funcerr "Warning: do_stacked_bar() requires at least matrix 'barstacked'!"
    endif
    if inbundle(b, "lines")
        mat ~= b.lines
    elif inbundle(b, "lines_rhs")
        mat ~= b.lines_rhs
    endif

    write_gp_settings(&b)	# Run basic settings

    set warnings off  # omit warning for NAs
    tmpfile = b.tmpfile
    outfile @tmpfile --append

        # Set style
        printf "set style data histogram \n"
        printf "set style histogram rowstacked\n"
        # Colored vs. mono
        #if mono==0
        #    printf "set style fill solid border -1 \n"	# OR border -2 ??
        #    printf "set style fill solid 0.35\n"
        #else
        #        printf "set style fill transparent solid %.2f noborder\n", b.alpha
        printf "set style fill pattern 9 border -2\n"	# you can change pattern 'n'
        # FIXME: For large datesets (many rows) one has to set "border -2"--WHY?
        #endif

        # write data block
        printf "$data <<EOF\n"
        loop i=1..rows(mat) -q
            loop j=1..cols(mat) -q
                printf "%g ", mat[i,j]
            endloop
            if inbundle(b, "Date")
                if i==1 || i % b.skipx == 0 #|| i==rows(mat)-15		# put xtics at 1st obs, every nstep obs. and last obs.
                    printf "%s", b.Date[i]
                else
                    #printf "-1"		# put major tick for (almost) each  obs.
                endif
            endif
            printf "\n"
        endloop
        printf "EOF\n"

        # write plot specification
        nstack = cols(b.barstacked)
        printf "plot \\\n"
        loop j=1..cols(mat) -q
            if j == 1 && inbundle(b, "Date")  # first date entry
                k = cols(mat)+1
                printf "$data using 1:xtic($%d < 0. ? \"\" : stringcolumn(%d)) t '%s' fillstyle solid 0.5 lc rgb '%s'", \
                  k, k, b.legend_str[j], b.colors[j]
            else
                if j>=1 && j<=nstack	# stacked barplot
                    printf "$data using %d t '%s' fillstyle pattern %d lc rgb '%s'", j, b.legend_str[j], b.pat[j], b.colors[j]

                else		# TODO: only lhs-lines allowed at the moment
                    printf "$data using $j t '%s' w lines linetype %d dt %d lc rgb '%s' \
                      pt %d ps %.2f lw %.2f pointinterval %.2f", b.legend_str[j], ($j-nstack), b.lines_dt[j-nstack], \
                      b.colors[j], b.pt[j-nstack], b.ps[j-nstack], b.lines_lw[j-nstack], b.lines_pi
                endif

            endif
            printf(j == cols(mat) ? "\n" : ", \\\n")
        endloop

    end outfile
    string fname = b.fname
    gnuplot --input="@tmpfile" --output="@fname"
end function


function void do_standard_plot (bundle *b)
/* lines = draw horizonal lines
    hfilled = draw horizonal shaded areas */

    write_gp_settings(&b)	# Run basic settings

    set warnings off   # TODO: should be done on a more global level
    tmpfile = b.tmpfile

    outfile @tmpfile --append
        if !any_key_in_bundle(b, defarray("points", "points_rhs", "lines", "lines_rhs", \
            "impulses", "impulses_rhs"))
            funcerr "Warning: do_standard_plot() requires at least matrix 'lines', 'points', or 'impulses'!"
        endif

        #-------------
        # Plot Impulse
        #-------------
        if any_key_in_bundle(b, defarray("impulses", "impulses_rhs"))
            matrix b.IMAT = {}
            if inbundle(b, "impulses")
                b.IMAT = b.impulses
            endif
            if inbundle(b, "impulses_rhs")
                matrix b.IMAT ~= b.impulses_rhs
            endif
        endif

        #------------
        # Plot lines
        #------------
        if any_key_in_bundle(b, defarray("lines", "lines_rhs"))
            matrix b.LMAT = {}
            if inbundle(b, "lines")
                matrix b.LMAT = b.lines
            endif
            if inbundle(b, "lines_rhs")
                b.LMAT ~= b.lines_rhs
            endif
        endif


        #------------
        # Plot points
        #------------
        if any_key_in_bundle(b, defarray("points", "points_rhs"))
            matrix b.PMAT = {}
            if inbundle(b, "points")
                matrix b.PMAT = b.points
            endif
            if inbundle(b, "points_rhs")
                matrix b.PMAT ~= b.points_rhs
            endif
        endif

        # Write plot command
        write_standardplot_cmd(&b)

        #----------------------------------------------------------
        # write data block for horizontal mat2=hfilled shaded area
        #----------------------------------------------------------
        if inbundle(b, "hfilled")
            loop j=1..rows(b.hfilled) -q		# CI
                printf "$j %g %g\n", b.hfilled[j,1], b.hfilled[j,2]
            endloop
            printf "e\n"
        endif

        #-------------------
        # Plot impulse values
        # write data block
        #-------------------
        if any_key_in_bundle(b, defarray("impulses", "impulses_rhs"))
            write_data_block(&b, b.IMAT)
        endif

        #-------------------
        # Plot lines values
        # write data block
        #-------------------
        if any_key_in_bundle(b, defarray("lines", "lines_rhs"))
            write_data_block(&b, b.LMAT)
        endif

        #-------------------
        # Plot points values
        # write data block
        #-------------------
        if any_key_in_bundle(b, defarray("points", "points_rhs"))
            write_data_block(&b, b.PMAT)
        endif

    end outfile
    string fname = b.fname
    gnuplot --input="@tmpfile" --output="@fname"
end function


function void do_scatter_plot (bundle *b)

    write_gp_settings(&b)						# call basic settings

    b.ps = (b.ps.=0) ? 0.5 : b.ps		# make sure points are plotted

    set warnings off
    tmpfile = b.tmpfile

    outfile @tmpfile --append

        if !any_key_in_bundle(b, defarray("lines", "lines_rhs", "points", "points_rhs"))
            funcerr "Error: do_scatter_plot() requires at least matrix 'lines' and 'points'."
        endif

        # Transparency
        #        printf "set style fill transparent solid %.2f noborder\n", b.alpha		# FIXME: doesn't work yet
        #printf "set style circle radius 0.08\n"


        #------------------------------------
        # Setup matrices for lines and points
        #------------------------------------
        if any_key_in_bundle(b, defarray("lines", "lines_rhs"))
            matrix LMAT = {}
            if inbundle(b, "lines")
                matrix LMAT = b.lines
            endif

            if inbundle(b, "lines_rhs")
                matrix LMAT ~= b.lines_rhs
            endif
            matrix b.xval = LMAT[,1]		# first column refers to values on the x-axis
            b.LMAT = LMAT[,2:]
        endif
        if any_key_in_bundle(b, defarray("points", "points_rhs"))
            matrix PMAT = {}
            if inbundle(b, "points")
                matrix PMAT = b.points
            endif
            if inbundle(b, "points_rhs")
                matrix PMAT ~= b.points_rhs
            endif
            matrix b.xval = PMAT[,1]		# first column refers to values on the x-axis
            b.PMAT = PMAT[,2:]
        endif

        # Write plot cmd
        #----------------
        write_scatterplot_cmd(&b)

        #-------------------
        # Plot lines values
        # write data block
        #-------------------
        if any_key_in_bundle(b, defarray("lines", "lines_rhs"))
            write_data_block(&b, b.LMAT)
        endif

        #-------------------
        # Plot points values
        # write data block
        #-------------------
        if any_key_in_bundle(b, defarray("points", "points_rhs"))
            write_data_block(&b, b.PMAT)
        endif

    end outfile
    string fname = b.fname
    gnuplot --input="@tmpfile" --output="@fname"
end function



function void do_frequency_plot (bundle *b)
    /* Frequency plot */

    if inbundle(b, "data")
        matrix mat = b.data
    else
        funcerr "Warning: do_frequency_plot() requires at least matrix 'data'!"
    endif

    write_gp_settings(&b)
    tmpfile = b.tmpfile

    set warnings off  # omit warning for NAs

    outfile @tmpfile --append

        # Let gnuplot do the computation
        printf "bin_width = 1\n" # TODO: paramterize
        printf "bin_number(x) = floor(x/bin_width)\n"
        printf "rounded(x) = bin_width * ( bin_number(x) + 0.5 )\n"

        print "set boxwidth 0.8 relative"  # value < 1: leave small gap between solid (filled-in) bars.

        print "set style fill solid 0.5" # TODO: parameterize

        # Put the border more to the background by applying it
        # only on the left and bottom part and put it and the tics in gray
        #printf "set style line 11 lc rgb \"#808080\" lt 1 \n"
        #printf "set border 3 back ls 11\n"         # get rid of upper + left border
        #        printf "set tics nomirror \n"
        #        printf "set datafile missing \"NA\" \n"

        # TODO: outsource
        if inbundle(b, ymin) && inbundle(b, y_max)
            # set the value-range for legend
            printf "set yrange[%.5f:%.5f] \n", b.ymin, b.y_max
        endif

        /*
        # SET palette color
        # Defining a palette with discrete colors
        #printf "set palette defined ( 0 '#000fff', 1 '#90ff70', 2 '#ee0000') \n"
        # MATLAB COLORS:
        if b.mono==0
            printf "set palette defined (0 0 0 0.5, 1 0 0 1, 2 0 0.5 1, 3 0 1 1, \
              4 0.5 1 0.5, 5 1 1 0, 6 1 0.5 0, 7 1 0 0, 8 0.5 0 0)\n"
            #printf "set palette maxcolors 10 \n"
        else
            #printf "set palette gray negative\n" #gray positive
            printf "set palette gray negative gamma 1.5\n"
        endif
        */

        if b.nocolorbox == 1
            printf "unset colorbox\n"
        endif

        /*
        # Write xtics (date strings)
        if inbundle(b, "Date")
            scalar count = 1
            printf "set xtics ("
            loop i=1..cols(mat) -q
                if count==b.skipx || i==1
                    printf "\"%s\" %d, ", b.Date[i], $i
                    count=1
                endif
                count++
            endloop
            printf " ) out \n"
        endif
        */

        printf "plot '-' using (rounded($1)):(1) smooth frequency with boxes ls 1\n"
        write_frequency_plot_data(mat)

    end outfile

    string fname = b.fname
    fname

    gnuplot --input="@tmpfile" --output="@fname"
end function
