function scalar any_key_in_bundle (const bundle b, const strings keys)
    /* Return TRUE if any of the keys in `keys` are present in the bundle `b`, and FALSE otherwise.

    Args:
        b (bundle): A dictionary-like object containing key-value pairs.
        keys (list[str]): A list of keys to search for in `b`.

    Returns:
        bool: TRUE if any of the keys in `keys` are present in `b`, and FALSE otherwise.
    */

    scalar ret = 0

    loop i = 1..nelem(keys)
        ret += inbundle(b, keys[i])
    endloop

    return ret > 0 ? TRUE : FALSE
end function

function strings vector_to_strings (const matrix X)
    /* Put numerical values of a matrix into an array of strings */

    return strsplit(sprintf("%d", vec(X)),"\n")
end function


function strings obsdate_to_dateformat (const strings S "stringified $obsdate array",
                                        const int dform[0:5:1] "0=Y/M/D, 1=y/M/D, 2=Y/M, 3=y/M, 4=M/D, 5=M/y")
    /* */
    # TODO: Make use of internal calendar function

    # Bring obsdate stored in S to some format
    n=nelem(S)
    strings D = array(n)
    loop i=1..n -q
        string s = S[i]
        string y = substr(s,1,4)            # year
        string m = substr(s,5,6)            # month
        string d = substr(s,7,8)            # day
        if dform == 0
            D[i] = sprintf("%s/%s/%s",y,m,d)
        elif dform == 1
            y = substr(y,3,4)
            D[i] = sprintf("%s/%s/%s",y,m,d)
        elif dform == 2
            D[i] = sprintf("%s/%s",y,m)
        elif dform == 3
            y = substr(y,3,4)
            D[i] = sprintf("%s/%s",y,m)
        elif dform == 4
            D[i] = sprintf("%s/%s",m,d)
        elif dform == 5
            y = substr(y,3,4)
            D[i] = sprintf("%s/%s",m,y)
        endif
    endloop

    return D
end function


function bundle default_opts ()
    bundle self

    # Define default values
    #-----------------------

    string self.which = "standard"  # standard plot incl. lines, CIs around lines, impulses, vertical shaded areas

    string self.fname = "display"   # output file

    # font related
    self.fstyle = "serif"
    self.fs = 12                    # font size for TODO ???
    self.vlines_fs = 10             # labels for vertical lines

    # date format
    self.dateform = 1               # date format
    self.skipx = 10                 # put xticks every n-th unit

    # legend
    self.legend_show = 1                    # show legend (default: true)
    self.legend_pos = 0                 # default pos. of legend
    strings self.legend_str = array(12)

    # style
    self.grid = 1                   # draw no grid
    self.noborder = 0               # draw no border = draw top and rhs axis

    # linetype
    self.ps = 0*ones(12,1)              # point size
    self.pt = {6,7,4,5} ~ seq(8,20)     # point type
    self.lines_pi = 4                   # point interval
    self.lines_dt = ones(12,1)          # dash type (default: solid lines) [1:10]: http://gnuplot.sourceforge.net/demo_5.1/dts.html
    #    self.lines_rhs_dt = ones(12,1)         # dash type (default: solid lines) [1:10]: http://gnuplot.sourceforge.net/demo_5.1/dts.html
    self.vlines_dt = ones(12,1)         # dash type for vertical lines

    # lines_lw
    self.lines_lw = 1.5*ones(12,1)      #    for rhs lines
    self.lines_rhs_lw = 1.5*ones(12,1)      # for lhs lines
    self.impulses_lw = ones(12,1)       # for rhs impulses
    self.impulses_rhs_lw = ones(12,1)   # for lhs impulses
    self.vlines_lw = ones(12,1)         # for vertical lines

    # line colors
    self.mono = 0                   # monochrome off
    /*
       strings lc = array(12)
       loop i=1..nelem(lc) -q
       lc[i] = "black"
       endloop
       self.colors = lc
    */
    self.color = get_color_pallet("dark2")  # greys(), jet(), dark2()

    # line colors for vertical lines
    /*
       strings lc = array(12)
       loop i=1..nelem(lc) -q
       lc[i] = "black"
       endloop
       self.vcolors = lc
    */
    self.vcolors =  get_color_pallet("jet")     # greys(), jet(), dark2()

    # colorbox for heatmap
    self.nocolorbox = 0

    # define pattern and transparency style
    # https://stackoverflow.com/questions/19412382/gnuplot-line-types
    self.pat = {1,4,2,3,8}      # pattern orderings
    self.vfilled_alpha = 0.3                # [0,1]
    self.hfilled_alpha = 0.9                # [0,1]

    # Add labels (conscutive numbering) on top of vlines
    self.add_vline_label = 1
    # Shift parameter for IDs numbering vertical lines (negative: DOWN, positive: UP)
    self.vlines_shift_fraction = 0.05           # 0.05-> add 5 pct. on y_max value

    # output size
    self.height = 480                   # height of plot
    self.width = 640                    # width of plot

    return self
end function


function strings get_color_pallet (const string pal)
    /* Return definition of color pallets */

    if pal=="dark2"
        # https://github.com/Gnuplotting/gnuplot-palettes/blob/master/dark2.pal
        return defarray("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D","#666666", \
        "#1B9E77", "#D95F02", "#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D","#666666")

    elif pal=="jet"
        # https://github.com/Gnuplotting/gnuplot-palettes/blob/master/jet.pal
        return defarray("#000080", "#0000ff", "#0080ff", "#00ffff", "#80ff80", "#ffff00", \
        "#ff8000", "#ff0000", "#800000", "#0000ff", "#007f00", "#ff0000", "#00bfbf", \
        "#bf00bf", "#bfbf00", "#3f3f3f")

    elif pal=="greys"
        # https://github.com/Gnuplotting/gnuplot-palettes/blob/master/jet.pal
        return defarray("#FFFFFF", "#F0F0F0", "#D9D9D9", "#BDBDBD", "#969696", \
        "#737373", "#525252", "#252525", "#FFFFFF", "#F0F0F0", "#D9D9D9", \
        "#BDBDBD", "#969696", "#737373", "#525252", "#252525")
    endif
end function


function void print_legend_str (bundle *b)
    /* Add a string containing gnuplot commands to set the position and visibility
        of the legend in a plot.

    Args:
        b (bundle): A dictionary-like object containing information about the plot's legend settings.
    */
    if b.legend_show == 0
        printf "set nokey\n"
    else
        if b.legend_pos == 0
            printf "set key outside below horizontal\n"
        elif b.legend_pos == 1
            printf  "set key top left\n"
        elif b.legend_pos == 2
            printf "set key top right\n"
        elif b.legend_pos == 3
            printf "set key bottom left\n"
        elif b.legend_pos == 4
            printf "set key bottom right\n"
        endif
        printf "set key opaque\n"
    endif
end function


function void print_term_str (bundle *b)
    /* Add a string containing a gnuplot command to set the terminal for the current plot.

    Args:
        b (bundle): Containing information about the plot's file format and other settings.

    Raises:
        Error: If the file extension provided in `b` is not supported.
    */

    if b.fileextension == "png" || b.fname == "display"
        printf "set term pngcairo size %.1f,%.1f enhanced font '%s,%.1f'\n", b.width,b.height,b.fstyle,b.fs
    elif b.fileextension == "pdf"
        printf "set term pdf size %.1f,%.1f enhanced font '%s,%.1f'\n", b.width,b.height,b.fstyle,b.fs
    elif b.fileextension == "eps"
        printf "set term eps size %.2f,%.2f font '%s,%.1f'\n", b.width,b.height,b.fstyle,b.fs   # NOTE: width, height must be in inches!
    elif b.fileextension == "svg"
        printf "set term svg size %.1f,%.1f enhanced font '%s,%.1f'\n", b.width,b.height,b.fstyle,b.fs
    else
        funcerr "*** Setting resolution is only allowed for png, pdf, eps and svg files. ***"
    endif
end function


function void write_data_block (bundle *b, const matrix mat)
    /* Write data block */

    if b.which=="standard" && any_key_in_bundle(b, defarray("lines", "lines_rhs", \
      "points", "points_rhs", "impulses", "impulses_rhs"))

        loop i=1..cols(mat) -q

            loop j=1..rows(mat) -q

                if inbundle(b, "Date")
                    if i==1 && ( j==1 || j % b.skipx == 0)
                        if ok(mat[j,i])
                            printf "%g %s\n", mat[j,i], b.Date[j]
                        else
                            printf "? %s\n", mat[j,i], b.Date[j]        # TODO: '?' for 'NaN' for missings?
                        endif
                    else
                        if ok(mat[j,i])
                            #printf "%g -1\n", b.lines[j,i] # put major tick (w.o. label) at each period
                            printf "%g \n", mat[j,i]        # don't put major tick if no label is provided
                        else
                            printf "? \n", mat[j,i]
                        endif
                    endif

                else
                    #printf "%g -1\n", b.lines[j,i]
                    if ok(mat[j,i])
                        printf "%g \n", mat[j,i]        # don't put major tick if no label is provided
                    else
                        printf "? \n", mat[j,i]
                    endif
                endif

            endloop

            printf "e\n"
        endloop


    elif b.which=="scatter"

        loop i=1..cols(mat) -q              # "mat" refers to values on the x-axis
            loop j=1..rows(mat) -q

                if ok(mat[j,i]) && ok(b.xval[j])
                    printf "%g  %g\n", b.xval[j], mat[j,i]
                else
                    printf "? ? \n"#, mat[j,i], b.xval[j]
                endif
            endloop
            printf "e\n"
        endloop
    endif

end function


function void print_range (bundle *b,
                           const string axis "Either 'y' or 'x' or so")
    /* Print x/y-range settings */

    if inbundle(b,"@axismin") && inbundle(b,"@axismax")
        printf "set @axisrange[%.5f:%.5f] \n", b.@axismin, b.@axismax
    elif inbundle(b,"@axismin") && !inbundle(b,"@axismax")
        printf "set @axisrange[%.5f:] \n", b.@axismin
    elif !inbundle(b,"@axismin") && inbundle(b,"@axismax")
        printf "set @axisrange[:%.5f] \n", b.@axismax
    else
        #printf "set @axisrange[:] \n"
    endif
end function


function void write_gp_settings (bundle *b)
    # Write basic settings which hold for all figure types
    set warnings off

    if inbundle(b, "obsdate")
        # re-define obsdate as array of strings
        # TODO Is there any gretl built-in function to do this?
        strings S = vector_to_strings(b.obsdate)
        strings b.Date = obsdate_to_dateformat(S,b.dateform)
    endif

    tmpfile = sprintf("%s/gplotfun_tmp_%g.gp", $dotdir, int(randgen1(u,1,10^6)))
    b.tmpfile = tmpfile
    string b.fileextension = splitfname(b.fname)[3]

    outfile @tmpfile --quiet
        printf "set encoding utf8\n"
        print_term_str(&b)
        printf "set datafile missing \"NA\" \n"         # TODO: is this correctly handled?
        print_legend_str(&b)

        # TODO: outsource
        if b.grid==0
            printf "unset grid\n"
        else
            #add a slight grid to make it easier to follow the exact position of the curves
            printf "set style line 12 lc rgb 'black' lt 0 lw 1 \n"  # light grey color (#808080)
            printf "set grid back ls 12 \n"
            #            printf "set style line 102 lc rgb '#d6d7d9' lt 0 lw 1 \n"
            #            printf "set grid back ls 102 \n"
        endif

        # TODO: outsource
        #printf "set xtics 500 border in scale 1,0 rotate by -90 \n"
        string str = (inbundle(b, "Date")) ? "rotate by -90" : ""
        printf "set xtics border out scale 1,0.5 nomirror %s\n", str    #autojustify
        # print x-range settings
        print_range(&b, "x")

        # MXTICS
        printf "unset mxtics\n"     # don't print minor xtics

        # TODO: outsource
        if !inbundle(b, "ynames")
            printf "set ytics nomirror border out\n"
            if any_key_in_bundle(b, defarray("lines_rhs", "impulses_rhs", "points_rhs"))
                printf "set y2tics nomirror border out\n"
            endif
            # print y-range settings
            print_range(&b, "y")

        else    # case when ylabels are provided (currently only for heatmap)
            ynames = b.ynames
            matrix printlab = zeros(nelem(ynames),1)
            loop i=2..nelem(ynames) -q
                scalar nval = strlen(ynames[$i-1])
                string S1 = ynames[$i-1]
                #S1 = substr(S1,1,(nval-3))
                string S2 = ynames[$i]
                #S2 = substr(S2,1,(nval-3))
                if S1!=S2
                    printlab[i] = 1
                endif
            endloop

            printf "set ytics ("
            string vname = ynames[1]
            vname = strsub(vname, "_", "-")     # substitute certain strings
            printf "\"%s\" %d, ", vname, 0
            loop i=2..rows(printlab) -q
                if printlab[$i]==1
                    string vname = ynames[$i]
                    vname = strsub(vname, "_", "-")
                    printf "\"%s\" %d ", vname,($i-1)
                    if i<rows(printlab)
                        printf ", "
                    endif
                endif
            endloop
            printf " ) font 'serif,%.1f' out\n", b.fs # rotate by 45
        endif

        # Labels + title
        if inbundle(b, "xlabel")
            printf "set xlabel '%s' font '%s,%d'\n", b.xlabel, b.fstyle, b.fs
        endif
        if inbundle(b, "ylabel")
            printf "set ylabel '%s' font '%s,%d'\n", b.ylabel, b.fstyle, b.fs
        endif
        if inbundle(b, "title")
            printf "set title '%s' font '%s,%d'\n", b.title, b.fstyle, b.fs
        endif

        # Make graph nicer
        #2) put the border more to the background by applying it
        # only on the left and bottom part and put it and the tics in gray
        #        printf "set style line 11 lc rgb 'black' lt 1 \n"  # #808080
        if inbundle(b, "noborder")
            #printf "set border 3 back ls 11 \n"            # get rid of upper + left border
            printf "set style line 101 lc rgb '#808080' lt 1 lw 1 \n"
            printf "set border 3 ls 101 \n"
            #            printf "set tics nomirror out scale 0.75 \n"
        endif

        # hfilled: horizontally shaded area(s)
        if inbundle(b, "hfilled")
            printf "set style fill transparent solid %.2f noborder\n", b.hfilled_alpha
        endif

        # vfilled: Vertical, grey shaded areas
        # pairs of starting/ending dates are put into a n by 2 matrix where
        # col. refer to start/ending and rows to specific events
        if inbundle(b, "vfilled")
            printf "set style rect fc lt -1 fs transparent solid %.2f noborder\n", b.vfilled_alpha
            loop i=1..rows(b.vfilled) -q
                printf "set obj rect from %d, graph 0 to %d, graph 1\n", \
                  b.vfilled[i,1], b.vfilled[i,2]
            endloop
        endif

        # vlines: Vertical (dashed) lines + LABELS
        # provide a vector of dates (obsdate format) by a n by 1 matrix where
        # rows refer to specific events
        if inbundle(b, "vlines")
            b.vlines = vec(b.vlines)
            loop i=1..rows(b.vlines) -q
                printf "set arrow from %d, graph 0 to %d, graph 1 nohead lw %.2f lc rgb '%s' \
                  linetype $i dt %d front \n", b.vlines[i], b.vlines[i], b.vlines_lw[i], b.vcolors[i], b.vlines_dt[i]
            endloop
        endif


        if inbundle(b, "vlines") && b.add_vline_label               # Add label to vertical lines
            # TODO: needs further testing except for 'barstacked' case
            if inbundle(b, "y_max")
                scalar y_max = b.y_max
            else
                loop i=1..7 -q
                    if i==1 && inbundle(b,"lines")
                        matrix mat = b.lines
                        scalar y_max = max(maxc(mat))
                    elif i==2 && inbundle(b,"lines_rhs")
                        mat = b.lines_rhs
                        # TODO: add y2_max = max(maxc(mat))
                    elif i==3 && inbundle(b,"impulses")
                        mat = b.impulses
                        scalar y_max = max(maxc(mat))
                    elif i==4 && inbundle(b,"impulses_rhs")
                        mat = b.impulses_rhs
                    elif i==5 && inbundle(b,"barstacked")
                        mat = sumr(b.barstacked)    # sum over all columns since we look at stacked values
                        scalar y_max = max(maxc(mat))
                    elif i==6 && inbundle(b,"points")
                        mat = b.points
                        scalar y_max = max(maxc(mat))
                    elif i==7 && inbundle(b,"points_rhs")
                        mat = b.points_rhs
                    endif
                    if i>1 && exists(mat)
                        if max(maxc(mat))>y_max
                            y_max = max(maxc(mat))
                        endif
                    endif
                endloop
            endif

            scalar incr = y_max * b.vlines_shift_fraction   # move label a bit higher
            matrix mat = vec(b.vlines)
            loop i=1..rows(mat) -q
                printf "set label '$i' at %d,%g point lt 0 center offset -0.5,%g font ',%d'\n", \
                  b.vlines[i], y_max, incr, b.vlines_fs
            endloop

        endif

    end outfile
end function


function void write_frequency_plot_data (const matrix mat)
    /* Write data for frequency plot.
    "mat" must have two columns:
    1. Index vector
    2. Vector with frequency values. */

    printf "%16.g", mat
    printf "\ne\n"
end function
